generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DriverStatus {
  LIVRE
  OCUPADO
  OFFLINE
}

enum RideStatus {
  PENDENTE
  ACEITA
  CONCLUIDA
  CANCELADA
}

model User {
  id        Int      @id @default(autoincrement())
  nome      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  senha     String   @db.VarChar(255)
  telefone  String   @unique @db.VarChar(15)
  latitude  Float?
  longitude Float?
  criadoEm  DateTime @default(now()) @map("criado_em")
  rides     Ride[]   @relation("UserRides")
}

model Driver {
  id        Int          @id @default(autoincrement())
  nome      String       @db.VarChar(100)
  email     String       @unique @db.VarChar(100)
  senha     String       @db.VarChar(255)
  telefone  String       @unique @db.VarChar(15)
  status    DriverStatus @default(OFFLINE)
  latitude  Float?
  longitude Float?
  criadoEm  DateTime     @default(now()) @map("criado_em")
  vehicle   Vehicle?
  rides     Ride[]       @relation("DriverRides")
}

model Vehicle {
  id          Int     @id @default(autoincrement())
  motoristaId Int     @unique
  marca       String  @db.VarChar(50)
  modelo      String  @db.VarChar(50)
  placa       String  @unique @db.VarChar(10)
  cor         String? @db.VarChar(20)
  capacidade  Int     @default(4)
  driver      Driver  @relation(fields: [motoristaId], references: [id], onDelete: Cascade)
}

model Ride {
  id           Int        @id @default(autoincrement())
  clienteId    Int
  motoristaId  Int?
  origemLat    Float
  origemLong   Float
  destinoLat   Float
  destinoLong  Float
  distanciaKm  Float?
  preco        Float?
  status       RideStatus @default(PENDENTE)
  criadoEm     DateTime   @default(now()) @map("criado_em")
  user         User       @relation("UserRides", fields: [clienteId], references: [id], onDelete: Cascade)
  driver       Driver?    @relation("DriverRides", fields: [motoristaId], references: [id], onDelete: SetNull)
}
